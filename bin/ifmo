#!/usr/bin/env node

/**
 * dependencies 
 */

var cli = require('clii')
  , exec = require('child_process').exec
  , ulog = require('util').log
  , ifmod = require('../');

var growl
  , use_growl;

try {
  growl = require('growl');
} catch (e) {
  // no growl support
}

function log (msg) {
  
  ulog( msg );
  
  if ( use_growl ) {
    if ( !growl ) {
      console.log('need growl support!\n\n  npm install -g growl');
      return;
    } else {
      growl.notify( msg );
    }
  }
  
}

cli('ifmo v0.0.1')
  .option('-c, --command <cmd>  command that is executed when a change is found')
  .option('-d, --directory <dir>  desired watch directory')
  .option('-r, --recursive  watches for all files in sub-directories')
  .option('-g, --growl  enables growl support ( npm install -g growl )')
  .option('--verbose  output all the thing (default)')
  .run( function (opts, args) {
    
    var files
      , dir
      , verb;
    
    use_growl = opts.growl ? true : false;
    dir = opts.directory || args[0];
    verb = opts.verbose === false ? false : true;
    
    if ( !dir ) {
      console.log('\n  Please specifiy: -d, --directory <dir>\n');
    } else {
      files = ifmod.find( dir, { recursive: opts.recursive } );
    }
    
    if ( files ) {
    
      if ( verb ) {
        var msg = [ "" ];
        
        log("watching files:");
        
        files.forEach(function(f){
          msg.push( ["    ", f].join('') );
        });
        
        msg.push('');
        console.log( msg.join('\n') );
      }
      
      files.forEach( function ( file ) { 
        
        var ifModified = !opts.command ? function () {
          
          return log( ['modified:', file].join(' ') );
          
        } : function () {
          
          if ( verb ) {
            log( ['changed found in:', file].join(' ') );
            log( ['running:', opts.command].join(' ') );
          }
          
          if ( opts.command ) {
            exec( opts.command, function (err, stdout, stderr) {
              if (err) throw err;
              if (stdout) console.log(stdout);
              if (stderr) console.log(stderr);
            });
          }
          
        };
        return ifmod.watch( file, ifModified );
      });
    }
  });
