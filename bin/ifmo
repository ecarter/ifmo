/**
 * Ifmo - bin
 * Copyright (C) 2011 Erin Carter ( hi@dnvsfn.com )
 * MIT Licensed
 */

#!/usr/bin/env node

/** Requires */

var cli = require('clii')
  , spawn = require('child_process').spawn
  , utilog = require('util').log
  , ifmod = require('../');

var command
  , directory
  , files
  , growl
  , use_growl
  , verbose;


// Check for growl support
try {
  growl = require('growl');
} catch (e) {
  // no growl support
}


/**
 * Logs Ifmo notifications
 *
 * Uses growl if `use_growl` is defined.
 *
 * @param {String} msg Message
 */

function log (msg) {
  utilog( msg );
  if ( use_growl ) {
    if ( !growl ) {
      console.log('need growl support!\n\n  npm install -g growl');
      return;
    } else {
      growl.notify( msg );
    }
  }
}

/**
 * Runs command specified with `-c` or `--command`
 */

function runCommand () {
  var cmd;
  
  // Create new process
  cmd = spawn( command );
  
  // Data
  cmd.stdout.on('data', function ( data ) {
    console.log( '' + data );
  });
  
  // Error
  cmd.stderr.on('data', function ( data ) {
    console.log( '' + data );
  });
  
  // Exit
  cmd.on('exit', function (code) {
    if ( code !== 0 ) console.log('done.');
  });
}

/**
 * Adds watcher to specified file.
 *
 * @param {String} file File to be watched
 */

function watcher ( file ) { 
  return ifmod.watch( file, 
    command
      ? function () {
          if (verbose) log('[MODIFIED] ' + file + '\n' + '[EXECUTING] ' + command);
          runCommand();
        }
      : function (file) { 
          return log( '[MODIFIED] ' + file );
        }
  );
}

/**
 * Ifmo CLI Utility
 */

cli('ifmo v0.0.1')
  .option('-c, --command <cmd>  command that is executed when a change is found')
  .option('-d, --directory <dir>  desired watch directory')
  .option('-r, --recursive  watches for all files in sub-directories')
  .option('-g, --growl  enables growl support ( npm install -g growl )')
  .option('--verbose  output all the thing (default)')
  .run( function (opts, args) {
    
    var output = '\n'; // Buffer
    
    /**
     * Set Options
     */
    command = opts.command || false;
    directory = opts.directory || args[0];
    use_growl = opts.growl ? true : false;
    verbose = opts.verbose || true;
    
    /**
     * When directory is specified
     */
    if ( !directory ) {
      console.log('\n  Please specifiy: -d, --directory <dir>\n');
    } else {
      files = ifmod.find( directory, { recursive: opts.recursive } );
    }
    
    /**
     * When files are found
     */
    if ( files ) {
      
      /**
       * Output watched files
       */
      if ( verbose ) {
        log("watching files:");
        files.forEach( function ( file ) {
          output += "    " + file + '\n';
        });
        console.log( output );
      }
      
      /**
       * Add watcher to each file
       */
      files.forEach( watcher );
    }
  });
